     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fprintf, fclose               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import fopen msvcrt.dll  
    11                                  import fprintf msvcrt.dll
    12                                  import fclose msvcrt.dll
    13                                  
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ;Se dau un nume de fisier si un text (definite in segmentul de date). Textul contine litere mici si spatii. Sa se inlocuiasca toate literele de pe pozitii pare cu numarul pozitiei. Sa se creeze un fisier cu nume
    18 00000000 616E612E74787400            nume_fisier db "ana.txt",0
    19 00000008 6100                        mod_acces db "a",0
    20 0000000A 616E6120617265206D-         s db 'ana are multe mere si pere '
    20 00000013 756C7465206D657265-
    20 0000001C 207369207065726520 
    21                                      ls equ $-s
    22 00000025 00<rept>                    rez times ls db 0
    23 00000040 FFFFFFFF                    descriptor_fis dd -1
    24 00000044 257300                      format db "%s",0
    25                                  
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29                                          ;Se dau un nume de fisier si un text (definite in segmentul de date). Textul contine litere mici si spatii. Sa se inlocuiasca toate literele de pe pozitii pare cu numarul pozitiei. Sa se creeze un fisier cu 
    30                                      
    31 00000000 68[08000000]                    push dword mod_acces     
    32 00000005 68[00000000]                    push dword nume_fisier
    33 0000000A FF15[00000000]                  call [fopen]
    34 00000010 83C408                          add esp, 4 * 2
    35                                  
    36 00000013 A3[40000000]                    mov [descriptor_fis], eax
    37                                          
    38 00000018 83F800                          cmp eax, 0
    39 0000001B 747A                            je final
    40                                              
    41 0000001D B91B000000                          mov ecx,ls; ecx = ls (lungimea sirului s)
    42 00000022 BE00000000                          mov esi,0; esi = 0
    43 00000027 66B80000                            mov ax,0; ax = 0
    44 0000002B E341                                jecxz sfarsit
    45                                                  repeta:
    46 0000002D 8ABE[0A000000]                              mov bh,[s+esi]; bh = [s+esi] (bh ia valoarea sirului la pozitia s+esi)
    47 00000033 80FF20                                      cmp bh,32; se realizeaza scaderea fictiva a codului ascii din bh si 32
    48 00000036 7429                                        jz next; daca scaderea fictiva este 0 se executa codul de la eticheta next
    49 00000038 B302                                            mov bl,2; bl = 2
    50 0000003A 6689C2                                          mov dx,ax; dx = ax
    51 0000003D F6F3                                            div bl; ah = ax % bl
    52 0000003F 80FC00                                          cmp ah,0; se realizeaza scaderea fictiva a valorii din ah si 0 (daca este 0 pozitia este para, impara altfel)
    53 00000042 6689D0                                          mov ax,dx; ax = dx
    54 00000045 740D                                            jz next1; daca scaderea fictiva este 0 se executa codul de la eticheta next1
    55 00000047 88BE[25000000]                                      mov [rez+esi],bh; [rez+esi] = bh (la pozitia rez+esi se pune valoarea din bh)
    56 0000004D 46                                                  inc esi; incrementeaza esi
    57 0000004E 6683C001                                            add ax,1; incrementeaza ax cu 1
    58 00000052 E2D9                                                loop repeta
    59                                                          next1:
    60 00000054 89B6[25000000]                                      mov [rez+esi],esi; [rez+esi] = esi (la pozitia rez+esi se pune valoarea lui esi)
    61 0000005A 46                                                  inc esi; incrementeaza esi
    62 0000005B 6683C001                                            add ax,1; incrementeaza ax cu 1
    63 0000005F E2CC                                                loop repeta
    64                                                      next:
    65 00000061 88BE[25000000]                                  mov [rez+esi],bh; [rez+esi] = bh (la pozitia rez+esi se pune valoarea din bh)
    66 00000067 46                                              inc esi; incrementeaza esi
    67 00000068 6683C001                                        add ax,1; incrementeaza ax cu 1
    68 0000006C E2BF                                    loop repeta
    69                                              sfarsit:
    70                                              
    71 0000006E FF35[25000000]                      push dword [rez]
    72 00000074 68[44000000]                        push dword format
    73 00000079 FF35[40000000]                      push dword [descriptor_fis]
    74 0000007F FF15[00000000]                      call [fprintf]
    75 00000085 83C40C                              add esp, 4 * 3
    76                                              
    77 00000088 FF35[40000000]                      push dword [descriptor_fis]
    78 0000008E FF15[00000000]                      call [fclose]
    79 00000094 83C404                              add esp, 4 * 1
    80                                              
    81                                          final:
    82                                          ; exit(0)
    83 00000097 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    84 00000099 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
