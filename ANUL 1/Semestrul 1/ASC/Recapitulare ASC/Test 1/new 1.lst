     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,fopen,fscanf,fclose,printf,scanf             ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import fopen msvcrt.dll
    11                                  import fscanf msvcrt.dll
    12                                  import fclose msvcrt.dll
    13                                  import printf msvcrt.dll
    14                                  import scanf msvcrt.dll
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18 00000000 00000000                    a dd 0
    19 00000004 00000000                    b dd 0
    20 00000008 613D00                      mesaj_a db "a=",0
    21 0000000B 623D00                      mesaj_b db "b=",0
    22 0000000E 256400                      format db "%d", 0
    23 00000011 00000000                    rez dd 0
    24 00000015 612A62203D20256400          mesaj_rez db "a*b = %d",0
    25                                  
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29                                      
    30                                          ;Sa se citeasca de la tastatura doua numere (in baza 10) si sa se calculeze produsul lor. Rezultatul inmultirii se va salva in memorie in variabila "rezultat" (definita in segmentul de date).
    31                                      
    32 00000000 68[08000000]                    push mesaj_a
    33 00000005 FF15[00000000]                  call [printf]
    34 0000000B 83C404                          add esp, 4*1
    35                                          
    36 0000000E 68[00000000]                    push dword a
    37 00000013 68[0E000000]                    push dword format
    38 00000018 FF15[00000000]                  call [scanf]
    39 0000001E 83C408                          add esp, 4*2
    40                                          
    41 00000021 68[0B000000]                    push mesaj_b
    42 00000026 FF15[00000000]                  call [printf]
    43 0000002C 83C404                          add esp, 4*1
    44                                          
    45 0000002F 68[04000000]                    push dword b
    46 00000034 68[0E000000]                    push dword format
    47 00000039 FF15[00000000]                  call [scanf]
    48 0000003F 83C408                          add esp, 4*2
    49                                          
    50                                          ; mov esi,a
    51                                          ; mov al,byte[esi]
    52                                          
    53                                          ; mov esi,b
    54                                          ; mov bl,byte[esi]
    55                                          
    56                                          ; mul bl
    57                                          ; mov [rez],ax
    58                                          
    59 00000042 A0[00000000]                    mov al,[a]
    60 00000047 8A1D[04000000]                  mov bl,[b]
    61 0000004D F6E3                            mul bl
    62 0000004F 66A3[11000000]                  mov [rez],ax
    63                                          
    64 00000055 FF35[11000000]                  push dword [rez]
    65 0000005B 68[15000000]                    push dword mesaj_rez
    66 00000060 FF15[00000000]                  call [printf]
    67 00000066 83C408                          add esp, 4*2
    68                                      
    69                                          ; exit(0)
    70 00000069 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    71 0000006B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
