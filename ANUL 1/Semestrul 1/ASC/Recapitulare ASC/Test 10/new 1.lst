     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,fopen,fscanf,fprintf,fread,fclose,printf,scanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import fopen msvcrt.dll
    11                                  import fscanf msvcrt.dll
    12                                  import fprintf msvcrt.dll
    13                                  import fread msvcrt.dll
    14                                  import fclose msvcrt.dll
    15                                  import printf msvcrt.dll
    16                                  import scanf msvcrt.dll
    17                                  
    18                                  ; our data is declared here (the variables needed by our program)
    19                                  segment data use32 class=data
    20 00000000 696E7075742E747874-         nume db "input.txt",0
    20 00000009 00                 
    21 0000000A 7200                        mod_acces db "r",0
    22 0000000C FFFFFFFF                    descriptor dd -1
    23 00000010 256400                      format db "%d", 0
    24 00000013 FFFFFFFF                    par1 dd -1
    25 00000017 00000000                    par2 dd 0
    26 0000001B FFFFFFFF                    nr dd -1
    27                                  
    28                                  ; our code starts here
    29                                  segment code use32 class=code
    30                                      start:
    31                                          
    32 00000000 68[0A000000]                    push dword mod_acces
    33 00000005 68[00000000]                    push dword nume
    34 0000000A FF15[00000000]                  call [fopen]
    35 00000010 83C408                          add esp,4*2
    36                                          
    37 00000013 83F800                          cmp eax,0
    38 00000016 746B                            je final_tot
    39 00000018 A3[0C000000]                    mov dword[descriptor],eax
    40                                          
    41                                          repeta:
    42                                              ;fscanf(descriptor,format,variabile)
    43 0000001D 68[1B000000]                        push dword nr
    44 00000022 68[10000000]                        push dword format
    45 00000027 FF35[0C000000]                      push dword[descriptor]
    46 0000002D FF15[00000000]                      call [fscanf]
    47 00000033 83C40C                              add esp,4*3
    48                                              
    49 00000036 83F8FF                              cmp eax,-1
    50 00000039 7439                                je final_repeta
    51                                              
    52 0000003B A1[1B000000]                        mov eax,dword[nr]
    53 00000040 833D[13000000]FF                    cmp dword[par1],-1
    54 00000047 7529                                jne nu_afisa
    55                                              
    56 00000049 66B90200                            mov cx,2
    57                                              
    58 0000004D 6689C3                              mov bx,ax
    59 00000050 66F7F1                              div cx
    60 00000053 80FC00                              cmp ah,0
    61 00000056 751A                                jne nu_afisa
    62                                              
    63 00000058 66891D[13000000]                    mov [par1],bx
    64                                              
    65 0000005F 68[13000000]                        push par1
    66 00000064 68[10000000]                        push dword format
    67 00000069 FF15[00000000]                      call [printf]
    68 0000006F 83C408                              add esp,4*2
    69                                              
    70                                              nu_afisa:
    71 00000072 EBA9                                jmp repeta
    72                                              
    73                                          final_repeta:
    74                                          
    75                                          ;fclose(descriptor)
    76 00000074 FF35[0C000000]                  push dword[descriptor]
    77 0000007A FF15[00000000]                  call [fclose]
    78 00000080 83C404                          add esp,4*1
    79                                          
    80                                          final_tot:
    81                                      
    82                                          ; exit(0)
    83 00000083 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    84 00000085 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
